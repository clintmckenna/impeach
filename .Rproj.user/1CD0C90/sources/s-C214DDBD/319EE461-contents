---
title: "genreNetwork"
author: "Clint McKenna"
date: "October 22, 2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

For this exercise, we will look at TMDB data (https://www.kaggle.com/tmdb/tmdb-movie-metadata). We will create a network of genres in the dataset, where each genre is a node. The size of the nodes will coorespond to the frequency of genres (larger = more movies). Finally, the edges will indicate that a movie shares two or more genres.


## data prep
```{r}

# load packages
library(igraph)
library(tidyverse)

# functions
select <- dplyr::select

# read in data
movies <- read.csv('../data/clean/movies.csv')
genres <- read.csv('../data/clean/genres.csv')


# get actors from highest budget movies
top <- movies %>% 
  select(title, budget) %>%
  #group_by(title) %>%
  top_n(n = 100, wt = budget)
genres <- left_join(top, genres, by = 'title')


```


## reshape genre column
Let's take a look at how the genre column looks. We can preview the first few rows using the head() function.
```{r}
head(genres)
```

Right now, the data is in "long" format. There is one row for each genre. If a movie has multiple genres, it has one row for each. The first entry, Avatar, has 4: Action, Adventure, Fantasy, and Science Fiction.

How can we reshape the data for network visualization? There are a usually a couple ways that network data is structured: an adjacency matrix and an edge list. For this task, we will focus on an edge list, just because I find that more intuitive.

An edge list has two columns. You can think of each row as a pair of nodes in a network that share an edge of some sort. In this case, it if they both occur in a movie. If we just look at the first movie above, we want a edge list that looks like this:

Action, Adventure
Action, Fantasy
Action, Science Fiction
Adventure, Fantasy
Adventure, Science Fiction
Fantasy, Science Fiction

To illustrate things, lets just start with the movie Avatar. We can filter using the filter() function from tidyverse.
```{r}
# filter only Avatar
dat <- genres %>%
  filter(title == 'Avatar')

# preview
head(dat)

```

Matching up the genres can be accomplished by using the combn() function, along with some cleanup.
```{r}
# check possible combinations of genre column
# t() will transpose the matrix that is output (flip sideways)
combinations <- combn(dat$genre, m = 2) %>% 
  t()

combinations

```

So for each movie, we will create a dataframe from the output of this matrix. Like so...
```{r}
data.frame(
  genre1 = combinations[,1],
  genre2 = combinations[,2]
)

```


So let's write a function to get the combinations we are looking for.
```{r}

# function for acquiring genre combinations
# x will be the input for the fuction - the dataframe we are using
getCombinations <- function(x) {

  # the column we are looking to make into an edge list is in quotes
  input <- x[,'genre']
  
  # here, we make a new object within our function for possible combinations
  combinations <- combn(input, m = 2) %>% 
  t()
  
  # and output a dataframe, which is returned when function is run
  output <- data.frame(
    genre1 = combinations[,1],
    genre2 = combinations[,2]
  )
  
  return(output)
  rm(combinations, output)
}



```





So here is the steps we will take:
- For each movie, calculate the combinations of genres possible
- 


```{r}
# remove films that only have one genre (one row in dataframe)
# here, we group by individual movies, add a column for the genre count
# then, filter out movies where count is 1 or less
genreList <- genres %>%
  group_by(title) %>%
  mutate(count = n()) %>%
  filter(count > 1) %>%
  select(-count) %>% 
  ungroup() %>%
  mutate_all(as.character) %>%
  as.data.frame()

# use split to split up dataframe into individual lists for each movie
genreList <- genreList %>%
  # mutate(group = group_indices(., title)) %>%
  # split(.$group) %>%
  # map_dfr(getCombinations, .id = 'group')
  split(.$title) %>%
  map_dfr(getCombinations, .id = 'title')


```


Now, let's preview edgelist.
```{r}
# preview
head(genreList)
tail(genreList)

```


The last movie, Zulu, should have 3 genres: Crime, Drama, Thriller. Let's check that against the original genres dataset to make sure.
```{r}
genres %>%
  filter(title == 'Zulu')

```

Great! Now with our edgelist, we can proceed to visualizing the network. For this, we will use the igraph package.
```{r}
# for the next steps, we need to move title to the last column
genreList <- genreList %>%
  select(genre1, genre2, title)

# create network object. non-directed
net <- graph_from_data_frame(
  genreList,
  directed = FALSE
)

# plot
plot(net)

```


Add edge weights
```{r}
net2 <- graph.adjacency(get.adjacency(net),weighted=TRUE)
net2 <- as.undirected(net2)

plot(net2,
     layout = layout_in_circle,
     # layout = layout_nicely,
     # vertex.label.cex=0.75,
     vertex.label.font=2,
     vertex.label.color='black',
     # vertex.label = NA,
     vertex.shape='circle', 
     vertex.size = 10,
     vertex.color = 'plum',
     edge.width = 1)








```


## degree centrality

degree is a count of the number of neighbors a node has

Betweenness centrality measures the extent to which a vertex lies on paths between other vertices.

eigenvector centrality - central vertices are those with many central neighbors



```{r}

degree(net2)

betweenness(net2)

eigen_centrality(net2)$vector




```


```{r}


plot(net2,
     # layout = layout_in_circle,
     layout = layout_nicely,
     # vertex.label.cex=0.75,
     vertex.label.font=2,
     vertex.label.color='black',
     # vertex.label = NA,
     vertex.shape='circle', 
     vertex.size = degree(net2)*2,
     vertex.color = 'plum',
     edge.width = 1)



```





```{r}

#write.csv(genreList, '../data/clean/genreEdgeList.csv')

```







